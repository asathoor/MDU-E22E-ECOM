<?php
 class WP_HTML_Decoder { public static function attribute_starts_with( $haystack, $search_text, $case_sensitivity = 'case-sensitive' ) { $search_length = strlen( $search_text ); $loose_case = 'ascii-case-insensitive' === $case_sensitivity; $haystack_end = strlen( $haystack ); $search_at = 0; $haystack_at = 0; while ( $search_at < $search_length && $haystack_at < $haystack_end ) { $chars_match = $loose_case ? strtolower( $haystack[ $haystack_at ] ) === strtolower( $search_text[ $search_at ] ) : $haystack[ $haystack_at ] === $search_text[ $search_at ]; $is_introducer = '&' === $haystack[ $haystack_at ]; $next_chunk = $is_introducer ? self::read_character_reference( 'attribute', $haystack, $haystack_at, $token_length ) : null; if ( null === $next_chunk && ! $chars_match ) { return false; } if ( null === $next_chunk && $chars_match ) { ++$haystack_at; ++$search_at; continue; } if ( 0 !== substr_compare( $search_text, $next_chunk, $search_at, strlen( $next_chunk ), $loose_case ) ) { return false; } $haystack_at += $token_length; $search_at += strlen( $next_chunk ); } return true; } public static function decode_text_node( $text ) { return static::decode( 'data', $text ); } public static function decode_attribute( $text ) { return static::decode( 'attribute', $text ); } public static function decode( $context, $text ) { $decoded = ''; $end = strlen( $text ); $at = 0; $was_at = 0; while ( $at < $end ) { $next_character_reference_at = strpos( $text, '&', $at ); if ( false === $next_character_reference_at || $next_character_reference_at >= $end ) { break; } $character_reference = self::read_character_reference( $context, $text, $next_character_reference_at, $token_length ); if ( isset( $character_reference ) ) { $at = $next_character_reference_at; $decoded .= substr( $text, $was_at, $at - $was_at ); $decoded .= $character_reference; $at += $token_length; $was_at = $at; continue; } ++$at; } if ( 0 === $was_at ) { return $text; } if ( $was_at < $end ) { $decoded .= substr( $text, $was_at, $end - $was_at ); } return $decoded; } public static function read_character_reference( $context, $text, $at = 0, &$match_byte_length = null ) { global $html5_named_character_references; $length = strlen( $text ); if ( $at + 1 >= $length ) { return null; } if ( '&' !== $text[ $at ] ) { return null; } if ( '#' === $text[ $at + 1 ] ) { if ( $at + 2 >= $length ) { return null; } $digits_at = $at + 2; if ( 'x' === $text[ $digits_at ] || 'X' === $text[ $digits_at ] ) { $numeric_base = 16; $numeric_digits = '0123456789abcdefABCDEF'; $max_digits = 6; ++$digits_at; } else { $numeric_base = 10; $numeric_digits = '0123456789'; $max_digits = 7; } $zero_count = strspn( $text, '0', $digits_at ); $digit_count = strspn( $text, $numeric_digits, $digits_at + $zero_count ); $after_digits = $digits_at + $zero_count + $digit_count; $has_semicolon = $after_digits < $length && ';' === $text[ $after_digits ]; $end_of_span = $has_semicolon ? $after_digits + 1 : $after_digits; if ( 0 === $digit_count && 0 === $zero_count ) { return null; } if ( 0 === $digit_count ) { $match_byte_length = $end_of_span - $at; return '�'; } if ( $digit_count > $max_digits ) { $match_byte_length = $end_of_span - $at; return '�'; } $digits = substr( $text, $digits_at + $zero_count, $digit_count ); $code_point = intval( $digits, $numeric_base ); if ( $code_point >= 0x80 && $code_point <= 0x9F ) { $windows_1252_mapping = array( 0x20AC, 0x81, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021, 0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0x8D, 0x017D, 0x8F, 0x90, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, 0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0x9D, 0x017E, 0x0178, ); $code_point = $windows_1252_mapping[ $code_point - 0x80 ]; } $match_byte_length = $end_of_span - $at; return self::code_point_to_utf8_bytes( $code_point ); } $name_at = $at + 1; if ( $name_at + 2 > $length ) { return null; } $name_length = 0; $replacement = $html5_named_character_references->read_token( $text, $name_at, $name_length ); if ( false === $replacement ) { return null; } $after_name = $name_at + $name_length; if ( ';' === $text[ $name_at + $name_length - 1 ] ) { $match_byte_length = $after_name - $at; return $replacement; } $ambiguous_follower = ( $after_name < $length && $name_at < $length && ( ctype_alnum( $text[ $after_name ] ) || '=' === $text[ $after_name ] ) ); if ( ! $ambiguous_follower ) { $match_byte_length = $after_name - $at; return $replacement; } if ( 'attribute' === $context ) { return null; } $match_byte_length = $after_name - $at; return $replacement; } public static function code_point_to_utf8_bytes( $code_point ) { if ( $code_point <= 0 || ( $code_point >= 0xD800 && $code_point <= 0xDFFF ) || $code_point > 0x10FFFF ) { return '�'; } if ( $code_point <= 0x7F ) { return chr( $code_point ); } if ( $code_point <= 0x7FF ) { $byte1 = ( $code_point >> 6 ) | 0xC0; $byte2 = $code_point & 0x3F | 0x80; return pack( 'CC', $byte1, $byte2 ); } if ( $code_point <= 0xFFFF ) { $byte1 = ( $code_point >> 12 ) | 0xE0; $byte2 = ( $code_point >> 6 ) & 0x3F | 0x80; $byte3 = $code_point & 0x3F | 0x80; return pack( 'CCC', $byte1, $byte2, $byte3 ); } $byte1 = ( $code_point >> 18 ) | 0xF0; $byte2 = ( $code_point >> 12 ) & 0x3F | 0x80; $byte3 = ( $code_point >> 6 ) & 0x3F | 0x80; $byte4 = $code_point & 0x3F | 0x80; return pack( 'CCCC', $byte1, $byte2, $byte3, $byte4 ); } } 